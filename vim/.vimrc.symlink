execute pathogen#infect()

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set autowriteall
set backupdir=~/.temp
set dir=~/.temp
set encoding=utf-8
set expandtab
set fileformats=unix,dos
set grepprg=grep\ -nR\ $*\ /dev/null
set guifont=Source\ Code\ Pro\ Medium\ 11
set guioptions-=T
set ignorecase
set scrolloff=2
set sessionoptions+=winpos
set shellslash
set shiftwidth=2
set smartcase
set spelllang=de
set tabstop=2
set textwidth=0
set undodir=~/.temp
set undofile
set wildmenu
set history=500
set showbreak=↳\ 

let mapleader = ","
inoremap jj <ESC>


let g:tex_flavor = "latex"
filetype plugin on
filetype indent on
colorscheme mod_tcsoft
let g:Tex_ViewRule_dvi = 'yap -1'
let g:Tex_CompileRule_dvi = 'latex -interaction=nonstopmode -src-specials $*'

let g:ruby_debugger_spec_path = 'script/spec'
let g:ruby_debugger_cucumber_path = 'script/cucumber'

augroup filetypedetect
au BufNewFile,BufRead *.asy setf asy
augroup end

autocmd User BufEnterRails set notagrelative
autocmd User BufEnterRails normal ,vyu

au FocusLost * silent! wa

set wildignore+=*.png,*.jpg,*.gif,public/system/**,*.sassc
map <C-F> :CommandT<CR>

let g:fuzzy_ignore = "*.png,*.jpg,*.gif,vendor/**/*"

digraph ,, 8222
digraph '' 8220
digraph 66 8220
digraph 99 8221
digraph ~~ 0160
digraph .. 8230


let g:EasyGrepMode=0
let g:EasyGrepCommand=1
let g:EasyGrepRecursive=1
let g:EasyGrepAllOptionsInExplorer=1
let g:EasyGrepIgnoreCase=1
let g:EasyGrepCurrentBufferDir=0
let g:sparkupNextMapping = '<leader><c-e>'
let g:CommandTMaxFiles=50000

let g:utl_cfg_hdl_mt_generic = 'silent !xdg-open %u'

autocmd Syntax * syn match Nbsp / / containedin=ALL
autocmd Syntax * syn match Nbsp /\s\+$\| \+\ze\t/ containedin=ALL


ab destionation destination
ab Destionation Destination


function! RubyEval(code, ...)
  let fullcode = 'ruby argv = VIM::evaluate("a:000"); retval = begin ' . a:code . ' end; VIM::command("let l:retval=\"#{retval}\"")'
  execute fullcode
  return retval
endfunction

function! RubyClassifyFile()
  return RubyClassify(expand('%'))
endfunction

function! RubyClassify(file)
  return RubyEval('require %{rubygems}; require %{active_support}; require %{active_support/inflector}; ActiveSupport::Inflector.classify((argv.first.split(%r{[/.]}) - %w[app models controllers spec rb]).join(%{/}).gsub(/_spec/,""))', a:file)
endfunction

function! WhenNotDefault(given, default, alternative)
  if a:given == a:default
    return a:alternative
  else
    return a:given
  endif
endfunction
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

au BufNewFile,BufRead *.feature execute "AlignCtrl =p01111111111111111111111111P1 |"

"autocmd FileType ruby,sass autocmd BufWritePre <buffer> :%s/\s\+$//e

let g:ruby_debugger_debug_mode=1
