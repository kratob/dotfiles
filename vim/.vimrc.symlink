execute pathogen#infect()

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set autowriteall
set backupdir=~/.temp
set dir=~/.temp
set encoding=utf-8
set expandtab
set fileformats=unix,dos
set grepprg=grep\ -nR\ $*\ /dev/null
set guifont=Source\ Code\ Pro\ Medium\ 11
set guioptions-=T
set ignorecase
set scrolloff=2
set sessionoptions+=winpos
set shellslash
set shiftwidth=2
set smartcase
set spelllang=de
set tabstop=2
set textwidth=0
set undodir=~/.temp
set undofile
set wildmenu
set history=500
set showbreak=↳\ 
set noballooneval
set breakindent
set mousefocus

let mapleader = ","


" Tex
let g:tex_flavor = "latex"
filetype plugin on
filetype indent on
colorscheme mod_tcsoft
let g:Tex_ViewRule_dvi = 'yap -1'
let g:Tex_CompileRule_dvi = 'latex -interaction=nonstopmode -src-specials $*'


" Save on focus loss
au FocusLost * silent! wa



" Some digraphs
digraph ,, 8222  " „
digraph '' 8220  " “
digraph 66 8220  " “
digraph 99 8221  " ”
digraph ~~ 0160  " <nbsp>
digraph .. 8230  " …



" EasyGrep

let g:EasyGrepMode=0
let g:EasyGrepCommand=1
let g:EasyGrepRecursive=0
let g:EasyGrepAllOptionsInExplorer=1
let g:EasyGrepIgnoreCase=1
let g:EasyGrepCurrentBufferDir=0

set wildignore+=*.png,*.jpg,*.gif,public/system/**,*.sassc,**/node_modules/**,dumps/**


" disable annoying shortcuts
map <C-W>o <Nop>
map <C-W><C-O> <Nop>



" Some ruby settings

autocmd Syntax * syn match Nbsp / / containedin=ALL
autocmd Syntax * syn match Nbsp /\s\+$\| \+\ze\t/ containedin=ALL


au BufNewFile,BufRead *.feature execute "AlignCtrl =p01111111111111111111111111P1 |"

augroup rubypath
  autocmd!

  autocmd FileType ruby setlocal suffixesadd+=_trait.rb
  autocmd FileType ruby setlocal path+=app/models/shared
  autocmd FileType ruby setlocal balloonexpr=
augroup END



runtime macros/matchit.vim


" The Silver Searcher
"
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif



" Ctrl-P

let g:ctrlp_map = '<C-F>'
let g:ctrlp_match_window='bottom,order:ttb,min:1,max:20'


if executable('matcher')
    let g:ctrlp_match_func = { 'match': 'GoodMatch' }

    function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

      " Create a cache file if not yet exists
      let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
      if !( filereadable(cachefile) && a:items == readfile(cachefile) )
        call writefile(a:items, cachefile)
      endif
      if !filereadable(cachefile)
        return []
      endif

      " a:mmode is currently ignored. In the future, we should probably do
      " something about that. the matcher behaves like "full-line".
      let cmd = 'matcher --limit '.a:limit.' --manifest '.cachefile.' '
      if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
        let cmd = cmd.'--no-dotfiles '
      endif
      let cmd = cmd.a:str

      return split(system(cmd), "\n")

    endfunction
end

set colorcolumn=100


set statusline=%f\ %h%w%m%r\

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set statusline+=%=%(%l,%c%V\ %=\ %P%)

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
